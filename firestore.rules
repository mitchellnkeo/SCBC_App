rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /* ---------- Helper Functions ---------- */
    // Safely load the authenticated user's document (may not exist for brand-new users)
    function userDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    // Basic per-user rate-limit helper.
    // Allows a write only if the user's lastRequest is more than 60 seconds ago OR the field is missing.
    function notRateLimited() {
      return userDoc() == null || 
             userDoc().data.lastRequest == null ||
             request.time > userDoc().data.lastRequest + duration.value(1, 'm');
    }

    // Re-usable event body validator (title/description length etc.)
    function isValidEvent() {
      return request.resource.data.title is string &&
             request.resource.data.title.size() > 0 && request.resource.data.title.size() <= 100 &&
             request.resource.data.description is string &&
             request.resource.data.description.size() <= 2000;
    }

    // Users can read/write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null; // Allow reading other users for mentions, profiles, etc.
      
      // Allow admins to update user roles (but not other fields for security)
      allow update: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
        request.auth.uid != userId && // Prevent admins from updating their own role via this rule
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role', 'updatedAt']);
    }
    
    // Events rules
    match /events/{eventId} {
      allow read: if request.auth != null;

      // New events: authenticated and validated
      allow create: if request.auth != null && isValidEvent();

      // Updates / deletes: owner or admin
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.createdBy ||
        (userDoc() != null && userDoc().data.role == 'admin')
      );
    }
    
    // RSVPs rules
    match /rsvps/{rsvpId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && request.auth.uid == request.resource.data.userId && notRateLimited();
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Comments rules
    match /comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && notRateLimited();
      allow update, delete: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Notifications rules - users can read/write their own notifications
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.fromUserId);
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Notification settings rules
    match /notificationSettings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Monthly books rules
    match /monthlyBooks/{bookId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // FAQs rules
    match /faqs/{faqId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Friend requests - users can read their own incoming/outgoing requests and create new ones
    match /friendRequests/{requestId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.fromUserId || 
         request.auth.uid == resource.data.toUserId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.fromUserId;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.toUserId && 
        request.resource.data.status in ['accepted', 'declined'];
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.fromUserId;
    }

    // Friendships - users can read their own friendships and create new ones
    match /friendships/{friendshipId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.user1Id || 
         request.auth.uid == resource.data.user2Id);
      allow create: if request.auth != null;
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.user1Id || 
         request.auth.uid == resource.data.user2Id);
    }

    // Profile comments - friends can comment on each other's profiles
    match /profileComments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId || 
         request.auth.uid == resource.data.profileUserId);
    }

    // WhatsApp community rules
    match /whatsapp_community/{communityId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null 
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Reports collection - users can submit reports, admins can read/manage them
    match /reports/{reportId} {
      // Limit report submissions as well
      allow create: if request.auth != null && request.auth.uid == request.resource.data.reporterId && notRateLimited();
      
      // Users can read their own reports to see status updates
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.reporterId ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      
      // Only admins can update report status and add notes
      allow update: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Only admins can delete reports
      allow delete: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Announcements collection - admins can create/delete, all users can read
    match /announcements/{announcementId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}